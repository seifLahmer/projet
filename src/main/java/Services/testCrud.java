package Services;

import Entite.Abonnement;
import Entite.Payment;
import Services.ServiceAbonnement;
import Services.ServicePayment;
import java.sql.SQLException;
import java.util.Date;

public class testCrud {
    public static void main(String[] args) {
        try {
            // Initialisation des services
            ServiceAbonnement serviceAbonnement = new ServiceAbonnement();
            ServicePayment servicePayment = new ServicePayment();

            // ðŸ”¹ 1. Tester l'ajout d'un abonnement
            System.out.println("ðŸ”¹ Ajout d'un abonnement...");
            Abonnement newAbonnement = new Abonnement(
                    1, // AbonnementId
                    101, // MemberId
                    new Date(), // StartDate
                    new Date(2025 - 1900, 0, 30), // EndDate (ATTENTION : l'annÃ©e commence Ã  1900 en Java)
                    100.0, // Price
                    "En attente", // Status
                    5 // AdminId
            );
            // Appel de la mÃ©thode souscrireAbonnement avec les bons arguments
            Abonnement abonnementSouscrit = serviceAbonnement.souscrireAbonnement(
                    1,  // abonnementId
                    101, // memberId
                    5,   // adminId
                    100.0, // price
                    12   // dureeMois (exemple : 12 mois)
            );

// Affichage de la confirmation
            System.out.println("âœ… Abonnement ajoutÃ© avec succÃ¨s : " + abonnementSouscrit);


            // ðŸ”¹ 2. Tester l'ajout d'un paiement
            System.out.println("ðŸ”¹ Ajout d'un paiement...");
            Payment newPayment = new Payment(
                    1, // PaymentId
                    101, // MemberId
                    100.0, // Amount
                    new Date(), // PaymentDate
                    "EffectuÃ©", // PaymentStatus
                    1, // AbonnementId
                    5 // AdminId
            );
            servicePayment.ajouter(newPayment);
            System.out.println("âœ… Paiement ajoutÃ© avec succÃ¨s.\n");

            // ðŸ”¹ 3. Tester l'affichage des abonnements
            System.out.println("ðŸ”¹ Liste des abonnements :");
            serviceAbonnement.getAll().forEach(System.out::println);

            // ðŸ”¹ 4. Tester l'affichage des paiements
            System.out.println("\nðŸ”¹ Liste des paiements :");
            servicePayment.getAll().forEach(System.out::println);

            // ðŸ”¹ 5. Tester la mise Ã  jour d'un abonnement
            System.out.println("\nðŸ”¹ Renouvellement de l'abonnement...");
            serviceAbonnement.renouvelerAbonnement(1, 3);
            System.out.println("Abonnement renouvelÃ©.\n");

            // ðŸ”¹ 6. Tester la mise Ã  jour d'un paiement
            System.out.println("\nðŸ”¹ Mise Ã  jour du paiement...");
            newPayment.setAmount(120.0);
            servicePayment.update(newPayment);
            System.out.println("âœ… Paiement mis Ã  jour avec succÃ¨s.\n");

            // ðŸ”¹ 7. Tester la suppression d'un paiement
            System.out.println("\nðŸ”¹ Suppression du paiement...");
            servicePayment.supprimer(1);
            System.out.println(" Paiement supprimÃ© avec succÃ¨s.\n");

            // ðŸ”¹ 8. Tester la suppression d'un abonnement
            System.out.println("\nðŸ”¹ Annulation de l'abonnement...");
            serviceAbonnement.annulerAbonnement(1);
            System.out.println(" Abonnement annulÃ© avec succÃ¨s.");

        } catch (SQLException e) {
            System.out.println(" Erreur SQL : " + e.getMessage());
        }
    }
}
